Quick notes about SpaceToaster so I don't forget how anything works later on

Game state, messaging, and runtime logic:
While the main 'gameloop' function is still where step functions are called for each object, runtime state will now be managed through the 'sequenceDispatch' class, which is responsible for handling game state and advancing different sequences depending. Here's what happens on a single step now:
-The message stack from the previous step is sent to the sequence dispatcher
-Sequence dispatcher is stepped:
    -Sequence dispatcher iterates messages. Some messages are processed at the top (such as effects calls or state changes) while others are left in the array to be processed conditionally depending on the game state
    -Sequence dispatcher checks the game state and advances a sequence. If the game state is 'running', it advances the main sequence; if the game state is 'toasterDeath', it either starts or advances a death sequence, etc.
    -On the 'step' call of each sequence called by the dispatcher, the sequence either advances to the next element in its 'events' array and calls it, sits on a frame wait, or advances a subsequence.
-GameObjects are iterated and their update functions are called. GameObjects may hold references to the message stack and could populate new messages to be read on the next step.
-Effect objects are iterated and their update functions are called
-The collision loop is called, and any point value changes are put on the message stack to be processed on the next step
-The background is stepped

Currently the message stack itself is a class called 'MessageStack', which wraps an array. Messages are instances of the 'Message' class, and should use the "messageTypeEnum" to signify what kind of message they are.

Sequences:
These are the mechanisms for level scripting in SpaceToaster. To script a level:
-Create a new class extending 'sequence'
-Call super() in the constructor
-Populate the 'events' array. This is the actual script, and lets the programmer write out a level in a sequential order. Array members should be any of the following:
    -Functions: These are simply called on the frame where they are reached
    -Integers: These are a frame delay; the sequence will wait this number of frames before advancing past it.
    -"checkpoint": Sets a checkpoint. The next element after "checkpoint" will be executed in the same frame, so "checkpoint" is not frame exclusive
    -Sequences: A sequence instance inside of a level script is considered a subsequence. When reached, the calling sequence will block and will not advance until the subsequence completes.

A sequence indicates completion by setting its 'isComplete' property once it reaches the end of the array.
A sequence contains an 'exitCondition' property which can be populated with a function returning a boolean in order to set additional conditions before it can indicate completion. For example, blocking until there are no more enemies on screen.

Objects and enemies:
GameplayObject is the base class for interactive objects. It contains a few properties that may be useful to implementations. Properties and functions of note are:
-update(): Called on every step
-collide(): Called by the collision loop if this GameplayObject has collided with another GameplayObject. The collision loop will pass a value from the 'gameplayObjects' enum indicating what has collided with this object.
-destroy(): A function called when the user wants to destroy this object (remove it from its 'containerArray' and the game screen)
-'containerArray': A reference to an array that tracks this object. Typically, this will be the 'gameObjects' array in logic.js. This is the array the object would remove itself from in destroy() for example
-onDestroy: An optional property containing a function which is called in the 'destroy()' function (baked into the base class)
-messageStackOutput: An optional reference to the message stack, if this object is meant to send or read messages
-pointChange: A change to be made to the total point value on the next step
-pointValue: Optional field to record this object's value in points


Graphics:
starryBackground is a single object that draws the background. It gets added to the effects array and updated every frame, just like everything in the gameObjects array.
The 'Particle' class extends GameplayObject and draws a dot-shaped particle (actually, it's a period in a monospace font) at the given position, in the color of 'color' (a string containing a CSS color), moves it in the direction of 'angle' in increments of 'speed' pixels for 'duration' frames. It must be placed in a container array like any other GameObject. The function resolving 'angle' is not extremely accurate, so this is generally good for effects, but wouldn't be useful if it needed to move in a highly precise direction.
The 'ParticleExplosion' class uses Particle to create a fun explosion. It just needs to be placed wherever an explosion is desired and placed in a container array (ie the effects array).

Other:
The toaster's movement is hardcoded in logic.js and interacts with the rest of the game via a 'toasterCollision' object in the gameObjects array. 
There are a few convenient enums (const arrays, but close enough) for various purposes:
-viewportFifths/viewportSevenths/viewportNinths: Shortcut for various X positions in the viewport, useful for positioning things without having to start figuring out hard pixel locations (and useful if the units or dimensions ever change)
-gameplayObjects: Types of objects that exist in the game, used anywhere an object type (enemy, toaster, toast) needs to self-identify or be identified (such as the collision loop)
-gameStateEnum: Enum for various game states
-messageTypeEnum: Types of messages
These exist to standardize these as constants throughout the codebase, so it's important to use them properly.
